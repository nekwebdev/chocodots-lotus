#!/usr/bin/env bash
# https://github.com/nekwebdev/chocodots-lotus
# @nekwebdev
# LICENSE: GPLv3
#
# ~/.local/bin/ssh-setup
#
# script to setup ssh keys.
#
set -e

###### => variables ############################################################
SSH_ID=""

###### => echo helpers #########################################################
# _echo_step() outputs a step collored in cyan (6), without outputing a newline.
function _echo_step() { tput setaf 6;echo -n "$1";tput sgr 0 0; }
# _exit_with_message() outputs and logs a message in red (1) before exiting the script.
function _exit_with_message() { echo;tput setaf 1;echo "$1";tput sgr 0 0;echo;exit 1; }
# _echo_right() outputs a string at the rightmost side of the screen.
function _echo_right() { local T=$1;echo;tput cuu1;tput cuf "$(tput cols)";tput cub ${#T};echo "$T"; }
# _echo_success() outputs [ OK ] in green (2), at the rightmost side of the screen.
function _echo_success() { tput setaf 2;_echo_right "[ OK ]";tput sgr 0 0; }

###### => parse flags ##########################################################
while (( "$#" )); do
  case "$1" in
    --id)
      if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
        SSH_ID=$2; shift
      else
        _exit_with_message "when using --id an id name must be specified. Example: '--id my_ssh_key'"
      fi ;;
    *)
      shift ;;
  esac
done

###### => main #################################################################
function main() {
    _echo_step "Checking if $SSH_ID already exists"; echo
    if [[ -f "$HOME/.ssh/$SSH_ID" ]]; then
      _echo_step "  (Found $HOME/.ssh/$SSH_ID key)"
      _echo_success
    else
      _echo_step "  (Creating new $SSH_ID key)"; echo
      ssh-keygen -t ed25519 -f "$HOME/.ssh/$SSH_ID"
      _echo_success
    fi
    echo
    _echo_step "Replacing placeholder in relevant files with $SSH_ID"; echo
    local cfg_file
    cfg_file="$HOME/.config/shell/profile"
    _echo_step "  (Modifying $cfg_file)"
    [[ -f $cfg_file ]] && sed -i "s/id_ed25519/$SSH_ID/g" "$cfg_file"
    _echo_success

    cfg_file="$HOME/.gitconfig"
    _echo_step "  (Modifying $cfg_file)"
    [[ -f $cfg_file ]] && sed -i "s/id_ed25519/$SSH_ID/g" "$cfg_file"
    _echo_success; echo

    _echo_step "$SSH_ID public key:"; echo; echo

    cat "$HOME/.ssh/$SSH_ID.pub"; echo
    

#   # main steps
#   mkdir -p "$HOME/.local/{src,bin,share,log}"

#   local work_tree="$HOME"
#   local git_dir="$work_tree/.config/dotfiles"
#   local dots="/usr/bin/git --git-dir=$git_dir --work-tree=$work_tree"

#   _echo_step "Deploying dotfiles"; echo
#   if [[ ! -d $git_dir ]]; then
#     _echo_step "  (Initialize dotfiles bare git repository in $git_dir)"; echo
#     mkdir -p "$git_dir"
#     git init --bare "$git_dir"
#     $dots config status.showUntrackedFiles no
#     [[ -n $CHOCO_DOTS ]] && $dots remote add origin "$CHOCO_DOTS"
#     _echo_success
#   else
#     _echo_step "  (Using local dotfiles in $git_dir)"
#     _echo_success
#   fi

#   if [[ -n $CHOCO_DOTS ]]; then
#     _echo_step "  (Pull main branch from $CHOCO_DOTS)"; echo
#     $dots branch -m main
#     $dots pull origin main
#     _echo_success
#   fi
#   echo
#   if $CHOCO_COCOA; then
#     local cocoa="$work_tree/.config/cocoa/cocoa.sh"
#     if [[ -f $cocoa ]]; then
#       "$cocoa"
#     fi
#   fi

#   _exit_with_message "reminder: alias chocodots='$dots'"
}

[[ -z $SSH_ID ]] && _exit_with_message "use --id with an id name. Example: '--id my_ssh_key'"

main "$@"